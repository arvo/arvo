use super::*;

#[derive(Clone)]
pub struct Prelude {
    pub add_f32_fn: Function,
    pub add_f64_fn: Function,
    pub add_i8_fn: Function,
    pub add_i16_fn: Function,
    pub add_i32_fn: Function,
    pub add_i64_fn: Function,
    pub add_u8_fn: Function,
    pub add_u16_fn: Function,
    pub add_u32_fn: Function,
    pub add_u64_fn: Function,
    pub add_usize_fn: Function,

    pub addeq_f32_fn: Function,
    pub addeq_f64_fn: Function,
    pub addeq_i8_fn: Function,
    pub addeq_i16_fn: Function,
    pub addeq_i32_fn: Function,
    pub addeq_i64_fn: Function,
    pub addeq_u8_fn: Function,
    pub addeq_u16_fn: Function,
    pub addeq_u32_fn: Function,
    pub addeq_u64_fn: Function,
    pub addeq_usize_fn: Function,

    pub div_f32_fn: Function,
    pub div_f64_fn: Function,
    pub div_i8_fn: Function,
    pub div_i16_fn: Function,
    pub div_i32_fn: Function,
    pub div_i64_fn: Function,
    pub div_u8_fn: Function,
    pub div_u16_fn: Function,
    pub div_u32_fn: Function,
    pub div_u64_fn: Function,
    pub div_usize_fn: Function,

    pub mul_f32_fn: Function,
    pub mul_f64_fn: Function,
    pub mul_i8_fn: Function,
    pub mul_i16_fn: Function,
    pub mul_i32_fn: Function,
    pub mul_i64_fn: Function,
    pub mul_u8_fn: Function,
    pub mul_u16_fn: Function,
    pub mul_u32_fn: Function,
    pub mul_u64_fn: Function,
    pub mul_usize_fn: Function,

    pub sub_f32_fn: Function,
    pub sub_f64_fn: Function,
    pub sub_i8_fn: Function,
    pub sub_i16_fn: Function,
    pub sub_i32_fn: Function,
    pub sub_i64_fn: Function,
    pub sub_u8_fn: Function,
    pub sub_u16_fn: Function,
    pub sub_u32_fn: Function,
    pub sub_u64_fn: Function,
    pub sub_usize_fn: Function,

    pub concat_string_bool_fn: Function,
    pub concat_string_char_fn: Function,
    pub concat_string_f32_fn: Function,
    pub concat_string_f64_fn: Function,
    pub concat_string_i8_fn: Function,
    pub concat_string_i16_fn: Function,
    pub concat_string_i32_fn: Function,
    pub concat_string_i64_fn: Function,
    pub concat_string_string_fn: Function,
    pub concat_string_u8_fn: Function,
    pub concat_string_u16_fn: Function,
    pub concat_string_u32_fn: Function,
    pub concat_string_u64_fn: Function,
    pub concat_string_usize_fn: Function,

    pub write_bool_fn: Function,
    pub write_char_fn: Function,
    pub write_f32_fn: Function,
    pub write_f64_fn: Function,
    pub write_i8_fn: Function,
    pub write_i16_fn: Function,
    pub write_i32_fn: Function,
    pub write_i64_fn: Function,
    pub write_string_fn: Function,
    pub write_u8_fn: Function,
    pub write_u16_fn: Function,
    pub write_u32_fn: Function,
    pub write_u64_fn: Function,
    pub write_usize_fn: Function,

    pub writeln_bool_fn: Function,
    pub writeln_char_fn: Function,
    pub writeln_f32_fn: Function,
    pub writeln_f64_fn: Function,
    pub writeln_i8_fn: Function,
    pub writeln_i16_fn: Function,
    pub writeln_i32_fn: Function,
    pub writeln_i64_fn: Function,
    pub writeln_string_fn: Function,
    pub writeln_u8_fn: Function,
    pub writeln_u16_fn: Function,
    pub writeln_u32_fn: Function,
    pub writeln_u64_fn: Function,
    pub writeln_usize_fn: Function,
}

impl Prelude {
    pub fn new() -> Prelude {
        Prelude {
            add_f32_fn: add_fn!("f32", PrimitiveType::F32),
            add_f64_fn: add_fn!("f64", PrimitiveType::F64),
            add_i8_fn: add_fn!("i8", PrimitiveType::I8),
            add_i16_fn: add_fn!("i16", PrimitiveType::I16),
            add_i32_fn: add_fn!("i32", PrimitiveType::I32),
            add_i64_fn: add_fn!("i64", PrimitiveType::I64),
            add_u8_fn: add_fn!("u8", PrimitiveType::U8),
            add_u16_fn: add_fn!("u16", PrimitiveType::U16),
            add_u32_fn: add_fn!("u32", PrimitiveType::U32),
            add_u64_fn: add_fn!("u64", PrimitiveType::U64),
            add_usize_fn: add_fn!("usize", PrimitiveType::USize),

            addeq_f32_fn: addeq_fn!("f32", PrimitiveType::F32),
            addeq_f64_fn: addeq_fn!("f64", PrimitiveType::F64),
            addeq_i8_fn: addeq_fn!("i8", PrimitiveType::I8),
            addeq_i16_fn: addeq_fn!("i16", PrimitiveType::I16),
            addeq_i32_fn: addeq_fn!("i32", PrimitiveType::I32),
            addeq_i64_fn: addeq_fn!("i64", PrimitiveType::I64),
            addeq_u8_fn: addeq_fn!("u8", PrimitiveType::U8),
            addeq_u16_fn: addeq_fn!("u16", PrimitiveType::U16),
            addeq_u32_fn: addeq_fn!("u32", PrimitiveType::U32),
            addeq_u64_fn: addeq_fn!("u64", PrimitiveType::U64),
            addeq_usize_fn: addeq_fn!("usize", PrimitiveType::USize),

            div_f32_fn: div_fn!("f32", PrimitiveType::F32),
            div_f64_fn: div_fn!("f64", PrimitiveType::F64),
            div_i8_fn: div_fn!("i8", PrimitiveType::I8),
            div_i16_fn: div_fn!("i16", PrimitiveType::I16),
            div_i32_fn: div_fn!("i32", PrimitiveType::I32),
            div_i64_fn: div_fn!("i64", PrimitiveType::I64),
            div_u8_fn: div_fn!("u8", PrimitiveType::U8),
            div_u16_fn: div_fn!("u16", PrimitiveType::U16),
            div_u32_fn: div_fn!("u32", PrimitiveType::U32),
            div_u64_fn: div_fn!("u64", PrimitiveType::U64),
            div_usize_fn: div_fn!("usize", PrimitiveType::USize),

            mul_f32_fn: mul_fn!("f32", PrimitiveType::F32),
            mul_f64_fn: mul_fn!("f64", PrimitiveType::F64),
            mul_i8_fn: mul_fn!("i8", PrimitiveType::I8),
            mul_i16_fn: mul_fn!("i16", PrimitiveType::I16),
            mul_i32_fn: mul_fn!("i32", PrimitiveType::I32),
            mul_i64_fn: mul_fn!("i64", PrimitiveType::I64),
            mul_u8_fn: mul_fn!("u8", PrimitiveType::U8),
            mul_u16_fn: mul_fn!("u16", PrimitiveType::U16),
            mul_u32_fn: mul_fn!("u32", PrimitiveType::U32),
            mul_u64_fn: mul_fn!("u64", PrimitiveType::U64),
            mul_usize_fn: mul_fn!("usize", PrimitiveType::USize),

            sub_f32_fn: sub_fn!("f32", PrimitiveType::F32),
            sub_f64_fn: sub_fn!("f64", PrimitiveType::F64),
            sub_i8_fn: sub_fn!("i8", PrimitiveType::I8),
            sub_i16_fn: sub_fn!("i16", PrimitiveType::I16),
            sub_i32_fn: sub_fn!("i32", PrimitiveType::I32),
            sub_i64_fn: sub_fn!("i64", PrimitiveType::I64),
            sub_u8_fn: sub_fn!("u8", PrimitiveType::U8),
            sub_u16_fn: sub_fn!("u16", PrimitiveType::U16),
            sub_u32_fn: sub_fn!("u32", PrimitiveType::U32),
            sub_u64_fn: sub_fn!("u64", PrimitiveType::U64),
            sub_usize_fn: sub_fn!("usize", PrimitiveType::USize),

            concat_string_bool_fn: concat_string_fn!("bool", PrimitiveType::Bool),
            concat_string_char_fn: concat_string_fn!("char", PrimitiveType::Char),
            concat_string_f32_fn: concat_string_fn!("f32", PrimitiveType::F32),
            concat_string_f64_fn: concat_string_fn!("f64", PrimitiveType::F64),
            concat_string_i8_fn: concat_string_fn!("i8", PrimitiveType::I8),
            concat_string_i16_fn: concat_string_fn!("i16", PrimitiveType::I16),
            concat_string_i32_fn: concat_string_fn!("i32", PrimitiveType::I32),
            concat_string_i64_fn: concat_string_fn!("i64", PrimitiveType::I64),
            concat_string_string_fn: concat_string_fn!("string", PrimitiveType::Str),
            concat_string_u8_fn: concat_string_fn!("u8", PrimitiveType::U8),
            concat_string_u16_fn: concat_string_fn!("u16", PrimitiveType::U16),
            concat_string_u32_fn: concat_string_fn!("u32", PrimitiveType::U32),
            concat_string_u64_fn: concat_string_fn!("u64", PrimitiveType::U64),
            concat_string_usize_fn: concat_string_fn!("usize", PrimitiveType::USize),

            write_bool_fn: write_fn!("bool", PrimitiveType::Bool),
            write_char_fn: write_fn!("char", PrimitiveType::Char),
            write_f32_fn: write_fn!("f32", PrimitiveType::F32),
            write_f64_fn: write_fn!("f64", PrimitiveType::F64),
            write_i8_fn: write_fn!("i8", PrimitiveType::I8),
            write_i16_fn: write_fn!("i16", PrimitiveType::I16),
            write_i32_fn: write_fn!("i32", PrimitiveType::I32),
            write_i64_fn: write_fn!("i64", PrimitiveType::I64),
            write_string_fn: write_fn!("string", PrimitiveType::Str),
            write_u8_fn: write_fn!("u8", PrimitiveType::U8),
            write_u16_fn: write_fn!("u16", PrimitiveType::U16),
            write_u32_fn: write_fn!("u32", PrimitiveType::U32),
            write_u64_fn: write_fn!("u64", PrimitiveType::U64),
            write_usize_fn: write_fn!("usize", PrimitiveType::USize),

            writeln_bool_fn: writeln_fn!("bool", PrimitiveType::Bool),
            writeln_char_fn: writeln_fn!("char", PrimitiveType::Char),
            writeln_f32_fn: writeln_fn!("f32", PrimitiveType::F32),
            writeln_f64_fn: writeln_fn!("f64", PrimitiveType::F64),
            writeln_i8_fn: writeln_fn!("i8", PrimitiveType::I8),
            writeln_i16_fn: writeln_fn!("i16", PrimitiveType::I16),
            writeln_i32_fn: writeln_fn!("i32", PrimitiveType::I32),
            writeln_i64_fn: writeln_fn!("i64", PrimitiveType::I64),
            writeln_string_fn: writeln_fn!("string", PrimitiveType::Str),
            writeln_u8_fn: writeln_fn!("u8", PrimitiveType::U8),
            writeln_u16_fn: writeln_fn!("u16", PrimitiveType::U16),
            writeln_u32_fn: writeln_fn!("u32", PrimitiveType::U32),
            writeln_u64_fn: writeln_fn!("u64", PrimitiveType::U64),
            writeln_usize_fn: writeln_fn!("usize", PrimitiveType::USize),
        }
    }

    pub fn functions(&self) -> Functions {
        vec![self.add_f32_fn.clone(),
             self.add_f64_fn.clone(),
             self.add_i8_fn.clone(),
             self.add_i16_fn.clone(),
             self.add_i32_fn.clone(),
             self.add_i64_fn.clone(),
             self.add_u8_fn.clone(),
             self.add_u16_fn.clone(),
             self.add_u32_fn.clone(),
             self.add_u64_fn.clone(),
             self.add_usize_fn.clone(),

             self.div_f32_fn.clone(),
             self.div_f64_fn.clone(),
             self.div_i8_fn.clone(),
             self.div_i16_fn.clone(),
             self.div_i32_fn.clone(),
             self.div_i64_fn.clone(),
             self.div_u8_fn.clone(),
             self.div_u16_fn.clone(),
             self.div_u32_fn.clone(),
             self.div_u64_fn.clone(),
             self.div_usize_fn.clone(),

             self.mul_f32_fn.clone(),
             self.mul_f64_fn.clone(),
             self.mul_i8_fn.clone(),
             self.mul_i16_fn.clone(),
             self.mul_i32_fn.clone(),
             self.mul_i64_fn.clone(),
             self.mul_u8_fn.clone(),
             self.mul_u16_fn.clone(),
             self.mul_u32_fn.clone(),
             self.mul_u64_fn.clone(),
             self.mul_usize_fn.clone(),

             self.sub_f32_fn.clone(),
             self.sub_f64_fn.clone(),
             self.sub_i8_fn.clone(),
             self.sub_i16_fn.clone(),
             self.sub_i32_fn.clone(),
             self.sub_i64_fn.clone(),
             self.sub_u8_fn.clone(),
             self.sub_u16_fn.clone(),
             self.sub_u32_fn.clone(),
             self.sub_u64_fn.clone(),
             self.sub_usize_fn.clone(),

             self.concat_string_bool_fn.clone(),
             self.concat_string_char_fn.clone(),
             self.concat_string_f32_fn.clone(),
             self.concat_string_f64_fn.clone(),
             self.concat_string_i8_fn.clone(),
             self.concat_string_i16_fn.clone(),
             self.concat_string_i32_fn.clone(),
             self.concat_string_i64_fn.clone(),
             self.concat_string_string_fn.clone(),
             self.concat_string_u8_fn.clone(),
             self.concat_string_u16_fn.clone(),
             self.concat_string_u32_fn.clone(),
             self.concat_string_u64_fn.clone(),
             self.concat_string_usize_fn.clone(),

             self.write_bool_fn.clone(),
             self.write_char_fn.clone(),
             self.write_f32_fn.clone(),
             self.write_f64_fn.clone(),
             self.write_i8_fn.clone(),
             self.write_i16_fn.clone(),
             self.write_i32_fn.clone(),
             self.write_i64_fn.clone(),
             self.write_string_fn.clone(),
             self.write_u8_fn.clone(),
             self.write_u16_fn.clone(),
             self.write_u32_fn.clone(),
             self.write_u64_fn.clone(),
             self.write_usize_fn.clone(),

             self.writeln_bool_fn.clone(),
             self.writeln_char_fn.clone(),
             self.writeln_f32_fn.clone(),
             self.writeln_f64_fn.clone(),
             self.writeln_i8_fn.clone(),
             self.writeln_i16_fn.clone(),
             self.writeln_i32_fn.clone(),
             self.writeln_i64_fn.clone(),
             self.writeln_string_fn.clone(),
             self.writeln_u8_fn.clone(),
             self.writeln_u16_fn.clone(),
             self.writeln_u32_fn.clone(),
             self.writeln_u64_fn.clone(),
             self.writeln_usize_fn.clone()]
    }
}