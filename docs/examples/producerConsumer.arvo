module main

fn main() void -> {
  // Declare some configuration variables.
  let m i64 := 3;
  let n i64 := 4;

  // Declare an empty channel of integers.
  let mut xs ..i64 := (..);

  // Spawn `m` concurrent producers.
  for i in 1 .. m { producer(xs); }

  // Spawn `n` concurrent consumers.
  for i in 1 .. n { consumer(i, xs); }

} // Automatically join all processes.

/// The `producer` function will write `100` integers to a channel. Each `for`
/// loop iteration is executed concurrently and so the order of these `100`
/// writes is not guaranteed.
fn producer(xs mut ..i64) void ->
  for x in 1 .. 100 {
    xs <- x;
  }

/// The `consumer` function will read integers from a channel until the
/// channel is closed. It will write each integer that it reads to stdout.
fn consumer(id i64, xs ..i64) void ->
  for x in xs {
    writeln(id ++ " reads " ++ x);
  }